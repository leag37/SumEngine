//*************************************************************************************************
// Title: SumResource.inl
// Author: Gael Huber
// Description: An engine resource of any given type. This serves as a template for loading
//	specific resources.
//*************************************************************************************************

//*************************************************************************************************
// Constructor
//*************************************************************************************************
template <typename Type>
Resource<Type>::Resource()
	: _resource(0), _name(""), _filePath(""), _isLoaded(false)
{ }

//*************************************************************************************************
// Constructor
//*************************************************************************************************
template <typename Type>
Resource<Type>::Resource(const String& name, const String& filePath, const String& fileType)
	: _resource(0), _name(name), _filePath(filePath), _fileType(fileType), _isLoaded(false)
{ }

//*************************************************************************************************
// Destructor
//*************************************************************************************************
template <typename Type>
Resource<Type>::~Resource()
{
	// Release the resource
	_unload();
}

//*************************************************************************************************
// Get the resource
//*************************************************************************************************
template <typename Type>
Type* Resource<Type>::resource()
{
	return _resource;
}

//*************************************************************************************************
// Get the name
//*************************************************************************************************
template <typename Type>
const String& Resource<Type>::name() const
{
	return _name;
}

//*************************************************************************************************
// Load the resource
//*************************************************************************************************
template <typename Type>
void Resource<Type>::_load()
{ }

//*************************************************************************************************
// Free the resource
//*************************************************************************************************
template <typename Type>
void Resource<Type>::_unload()
{ }