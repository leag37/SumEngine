//*************************************************************************************************
// Title: SumPhysicsManager.h
// Author: Gael Huber
// Description: Manager for game physics.
//*************************************************************************************************
#include "SumPhysicsManager.h"

//*************************************************************************************************
// Initialize the singleton instance of this class to 0
//*************************************************************************************************
template <> PhysicsManager* Singleton<PhysicsManager>::singleton = 0;

//*************************************************************************************************
// Constructor
//*************************************************************************************************
PhysicsManager::PhysicsManager()
{

}

//*************************************************************************************************
// Destructor
//*************************************************************************************************
PhysicsManager::~PhysicsManager()
{

}

//*************************************************************************************************
// Initialization method
//*************************************************************************************************
void PhysicsManager::startUp()
{

}

//*************************************************************************************************
// Shut down the manager
//*************************************************************************************************
void PhysicsManager::shutDown()
{

}

//*************************************************************************************************
// Update function for the manager
//*************************************************************************************************
void PhysicsManager::update()
{
	// Broad phase collision culling, update AABBs and compute overlapping pairs

	// Remove overlapping pairs using BV test

	// Compute contact points, resolve interpenetrations

	// Resolve constraints

	// Solve equations of motion
}

//*************************************************************************************************
// Register a physics object
//*************************************************************************************************
void PhysicsManager::registerPhysicsObject(PhysicsBody* body)
{

}
