//*************************************************************************************************
// Title: SumBaseTest.cpp
// Author: Gael Huber
// Description: Base class for other test suites to inherit from. Takes care of standard operations
//	like keeping track of total error count per suite, logging success vs. failure, etc.
//*************************************************************************************************
#include "SumBaseTest.h"

//*************************************************************************************************
// Constructor
//*************************************************************************************************
BaseTest::BaseTest()
	: _suiteName(""), _testName(""), _errors(0), _tests(0)
{ }

//*************************************************************************************************
// Constructor
//*************************************************************************************************
BaseTest::BaseTest(const String& suiteName)
	: _suiteName(suiteName), _testName(""), _errors(0), _tests(0)
{ }

//*************************************************************************************************
// Copy constructor
//*************************************************************************************************
BaseTest::BaseTest(const BaseTest& rhs)
	:	_suiteName(rhs._suiteName), _testName(rhs._testName),
		_errors(rhs._errors), _tests(rhs._tests)
{ }

//*************************************************************************************************
// Destructor
//*************************************************************************************************
BaseTest::~BaseTest()
{ }

//*************************************************************************************************
// Assignment
//*************************************************************************************************
BaseTest& BaseTest::operator=(const BaseTest& rhs)
{
	_suiteName = rhs._suiteName;
	_testName = rhs._testName;
	_errors = rhs._errors;
	_tests = rhs._tests;
	return *this;
}

//*************************************************************************************************
// Run the test suite
//*************************************************************************************************
void BaseTest::run()
{
	// Do nothing, this is for overriding
}

//*************************************************************************************************
// Reset test suite
//*************************************************************************************************
void BaseTest::reset()
{
	_errors = 0;
	_tests = 0;
}

//*************************************************************************************************
// Log an error
//*************************************************************************************************
void BaseTest::logError(SUINT testCase)
{
	cout << _testName.c_str() << " failed on case " << testCase << "!" << endl;
}

//*************************************************************************************************
// Log the start of the test
//*************************************************************************************************
void BaseTest::logStart()
{
	cout << "********************************************************************************" << endl;
	cout << "Beginning " << _suiteName.c_str() << "." << endl << endl << endl;
}

//*************************************************************************************************
// Log results of suite
//*************************************************************************************************
void BaseTest::logResults()
{
	// Success
	if(_errors == 0)
	{
		cout << "Success! " << _suiteName.c_str() << " completed " << _tests << " tests with 0 errors." << endl;
	}

	// Failure
	else
	{
		cout << "Failed! " << _suiteName.c_str() << " completed " << _tests << " tests with " << _errors << " errors." << endl;
	}
}

//*************************************************************************************************
// Get the number of errors
//*************************************************************************************************
SUINT BaseTest::getErrors()
{
	return _tests;
}

//*************************************************************************************************
// Get the number of tests
//*************************************************************************************************
SUINT BaseTest::getTests()
{
	return _tests;
}
